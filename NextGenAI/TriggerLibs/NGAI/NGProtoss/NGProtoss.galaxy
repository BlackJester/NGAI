//==================================================================================================
// Galaxy fuer die Protoss KI
//==================================================================================================

//ProxyPoints
point[8] NG_ProxyPoint;

void NG_initProtoss() {
    // add buildOrders to Commander Manager
    //NG_addProtossCommander(NG_4_Warpgates, NG_ProtInitBurner1, "ProtossKevin", "4 Warpgates", c_NGC_VERSUS_ALL_FLAG);
	NG_addProtossCommander(NG_BasicProtossBO, NG_ProtInitBasicBurner, "FooBar", "Basic BO", c_NGC_VERSUS_ALL_FLAG);
	NG_addProtossCommander(NG_Deathball_HOTS, NG_ProtInitBurnerMech, "Todd", "Deathball HOTS", c_NGC_VERSUS_ALL_FLAG);
    //NG_addProtossCommander(NG_ProxyTestBO, NG_EmptyProtossBurner, "Epoxi", "Proxytest", c_NGC_VERSUS_ALL_FLAG);
    // not yet tested!
    //NG_addProtossCommander(NG_DrogoMacroPhoenix, NG_ProtInitBurnerPhoenix, "Drogon", "PhoenixPunch", c_NGC_VERSUS_ZERG_FLAG);
    //NG_addProtossCommander(NG_NaNiwaSafeExpand, NG_ProtInitBurnerMech, "Nina", "SafeGame", c_NGC_VERSUS_PROTOSS_FLAG);
    NG_addProtossCommander(NG_EnVyAdeptAllIn, NG_ProtInitBurnerAdept, "Envy", "Adept All In", c_NGC_VERSUS_TERRAN_FLAG);
}

point NG_getProxyPoint(int playerid) {
    int i;
    unitgroup wp = UnitGroup(c_PU_WarpPrismPhasing, playerid, RegionEntireMap(), null, 0);
    if (UnitGroupCount(wp, c_unitCountAlive) != 0) {
        for (i = 1; i <= UnitGroupCount(wp, c_unitCountAlive); i += 1) {
            if (UnitHasBehavior(UnitGroupUnit(wp, i), "WarpPrismPowerSourceFast") || UnitHasBehavior(UnitGroupUnit(wp, i), "WarpPrismPowerSource")) {
                return UnitGetPosition(UnitGroupUnit(wp, i));
            }
        }
    } else if (UnitGroupCount(UnitGroup(c_PB_Pylon, playerid, RegionCircle(NG_ProxyPoint[playerid - 1], 1), null, 0), c_unitCountAll) != 0) {
        return NG_ProxyPoint[playerid - 1];
    }
    return null;
}

int NG_getWarpGateOffCooldownCount(int playerid) {
    int i;
    int ret = 0;
    abilcmd cmd = AbilityCommand("WarpGateTrain", 0);
    unitgroup ug = UnitGroup(c_PB_WarpGate, playerid, RegionEntireMap(), UnitFilter(0, 0, 0, 0), c_noMaxCount);
    int count = UnitGroupCount(ug, c_unitCountAlive);
    for (i = 1; i <= count; i += 1) {
        if (UnitAbilityChargeInfo(UnitGroupUnit(ug, i), cmd, c_unitAbilChargeCountLeft) != 0) {
            ret += 1;
        }
    }
    return ret;
}

void NG_setProxyPoint(int playerid, point inPoint) {
    NG_ProxyPoint[playerid - 1] = inPoint;
}

// returns a pathable point at the target location (used for computing distances)
point NG_PathablePoint(point aroundPoint) {
    int checkRange;
    int currentAngle;
    point tmp;
    point target;
    bool done;
    for (checkRange = 0; checkRange <= 5; checkRange += 1) {
        currentAngle = 0;
        if (!done) {
            while (currentAngle <= 360) {
                tmp = PointWithOffsetPolar(aroundPoint, checkRange, currentAngle);
                currentAngle += 20;
                if (PointPathingPassable(tmp)) {
                    done = true;
                    target = tmp;
                    break;
                }
            }
        }
    }
    return target;
}

// build proxyPylon
void NG_proxyPylon(int playerid) {
// init points
    point target;
    point start;
    point enemy;
    unit probe;
    order build;
// init variables
    fixed currentAngle;
    int checkRange;
    bool targetset;
    point targettemp;
    int i;
    fixed minDist;
    fixed distToEnemyQuot;
    unitfilter uf;
    unitgroup grp1;
// get start locations
    start = PlayerStartLocation(playerid);
//get "enemy base"
    enemy = NG_PathablePoint(NG_BestAttackPoint(playerid));
//This algorithm tries to find a place arount the enemy base. worked kinda good.
//For further developement, this stays.
// enemyHeight = CliffLevel(enemy);
    distToEnemyQuot = 0;
    minDist = 50;
    uf = UnitFilter(0, 0, 0, 0);
    UnitFilterSetState(uf, c_targetFilterHarvestableResource, c_unitFilterRequired);
    for (checkRange = 20; checkRange <= 80; checkRange += 1) {
        currentAngle = 0;
        while (currentAngle < 360) {
            targettemp = PointWithOffsetPolar(enemy, checkRange, currentAngle);
            currentAngle += 5;
            // if passable
            if (PointPathingPassable(targettemp)) {
                //can path
                if (PointPathingIsConnected(targettemp, enemy)) {
                    if (PointPathingIsConnected(targettemp, start)) {
                        // decision logic
                        // keine mineralien in der naehe
                        if (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(targettemp, 2), uf, 0), c_unitCountAll) == 0) {
                            if (PointPathingCost(targettemp, enemy) >= minDist) {
                                if (PointPathingCost(targettemp, enemy) / DistanceBetweenPoints(targettemp, enemy) >= distToEnemyQuot) {
                                    distToEnemyQuot = PointPathingCost(targettemp, enemy) / DistanceBetweenPoints(targettemp, enemy);
                                    target = targettemp;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
//end of algorithm.

//Old Algorithm: (Simplest way)
//target = PointAlongLine(start, enemy, DistanceBetweenPoints(start, enemy) * 0.5);

// get probe
// Execute order, and if necessary, find another valid point
    build = AICreateOrder(playerid, c_AB_BuildProtoss, 1); //0 == nexus, 1 == pylon
    OrderSetTargetPoint(build, target);
    probe = UnitGroupUnit(AIGetWorkers(playerid), 1);
    targetset = false;
    if (!UnitOrderIsValid(probe, build)) {
        for (checkRange = 0; checkRange <= 5; checkRange += 1) {
            currentAngle = 0;
            if (!targetset) {
                while (currentAngle <= 360) {
                    targettemp = PointWithOffsetPolar(target, checkRange, currentAngle);
                    currentAngle += 20;
                    OrderSetTargetPoint(build, targettemp);
                    if (UnitOrderIsValid(probe, build)) {
                        targetset = true;
                        break;
                    }
                }
            }

        }
    }
    NG_setProxyPoint(playerid, targettemp);
// execute order
    UnitIssueOrder(probe, build, c_orderQueueAddToFront);
//AICast(probe, build, c_noMarker, c_castHold);
}

// warp units to point.
// returns status of order (false if failed, true if succeeded)
bool NG_warpToProxy(int playerid, string unitType) {
    order build;
    unit gate;
    unitgroup gates = UnitGroup(c_PB_WarpGate, playerid, RegionEntireMap(), UnitFilter(0, 0, 0, 0), c_noMaxCount);
    bool loopdone = true;
    int i;
    int checkRange;
    point target;
    int currentAngle;
    abilcmd cmd;
    int unitIndex;
    point start;
    point enemy = NG_PathablePoint(NG_BestAttackPoint(playerid));
    point tmp;
    int minDist;
// get the unit index for the Warp command

    if (unitType == c_PU_Zealot) {
        unitIndex = 0;
    } else if (unitType == c_PU_Stalker) {
        unitIndex = 1;
    } else if (unitType == c_PU_HighTemplar) {
        unitIndex = 3;
    } else if (unitType == c_PU_DarkTemplar) {
        unitIndex = 4;
    } else if (unitType == c_PU_Sentry) {
        unitIndex = 5;
    } else if (unitType == c_PU_Adept) {
        unitIndex = 6;
    } else {
        // default, shouldn't happen
        // we dont know this unit
        return false;
    }
    if (unitIndex >= 0) {
        cmd = AbilityCommand("WarpGateTrain", unitIndex);
        //Select WarpGate from all warpgates, where skills are not on cd, and use the first found gate to warp the unit
        if (NG_getWarpGateOffCooldownCount(playerid) == 0) {
            // NG_debugInfo("all gates busy");
            return false;
        }
        for (i = 1; i <= UnitGroupCount(gates, c_unitCountAll); i += 1) {
            if (UnitGetType(UnitGroupUnit(gates, i)) == c_PB_WarpGate) {
                // are we able to cast the ability at this warpgate (== does it have a charge)
                if (UnitAbilityChargeInfo(UnitGroupUnit(gates, i), cmd, c_unitAbilChargeCountLeft) >= 1) {
                    gate = UnitGroupUnit(gates, i);
                    break;
                }
            }
        }
        build = AICreateOrder(playerid, "WarpGateTrain", unitIndex);
        target = NG_getProxyPoint(playerid);
        if (target == null) {
            // NG_debugInfo("no point found");
            return false;
        }
        start = target;
        minDist = PointPathingCost(start, enemy);
        loopdone = true;
        OrderSetTargetPoint(build, target);
        if (!UnitOrderIsValid(gate, build)) {
            loopdone = false;
            for (checkRange = 1; checkRange <= 13; checkRange += 1) {
                currentAngle = 0;
                //if no valid point has been found yet, look for another point
                if (!loopdone && !UnitOrderIsValid(gate, build)) {
                    //check around point with range checkRange
                    while (currentAngle < 360) {
                        tmp = PointWithOffsetPolar(start, checkRange / 2.0, currentAngle);
                        currentAngle += 30;
                        OrderSetTargetPoint(build, tmp);
                        if (UnitGroupCount(UnitGroup(null, c_playerAny, RegionCircle(tmp, 0.5), null, c_noMaxCount), c_unitCountAll) == 0) {
                            if (UnitOrderIsValid(gate, build)) {
                                if (PointPathingCost(tmp, enemy) < minDist) {
                                    loopdone = true;
                                    target = tmp;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (loopdone) {
            OrderSetTargetPoint(build, target);
            if (UnitOrderIsValid(gate, build)) {
                return UnitIssueOrder(gate, build, c_orderQueueAddToFront);
            } else {
                // NG_debugInfo("order invalid");
                return false;
            }
        } else {
            return false;
        }
    }
    return false;
}
