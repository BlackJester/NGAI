
//--------------------------------------------------------------------------------------------------
//  SPY - Structs
//--------------------------------------------------------------------------------------------------

struct NG_spyArmyInfo {
    int ngaiPlayerID;
    int enemyPlayerID;
    // cache data for max "c_NG_UNIT_MAX_CACHE_TIME" seconds
    fixed lastCalcTime;
    int knownSupply;
    int[c_NGUID_COUNT] unitCount;
    int[c_NGUID_COUNT] estimatedUnitCount;
    fixed estimatedUnitCountFactor;
    fixed estimatedSupply;
    fixed knownUnitsFactor;

    fixed airLightCount;                //estimated Light-Air-Units
	fixed groundLightCount;             //estimated Light-Ground-Units
	fixed airBioCount;                  //estimated Biological-Air-Units
	fixed groundBioCount;               //estimated Biological-Ground-Units
	fixed airArmorCount;                //estimated Armored-Air-Units
	fixed groundArmorCount;             //estimated Armored-Ground-Units
	fixed massiveCount;                 //estimated Massive-Units
};

struct NG_spyArmyEnumerator{
    bool inuse;
    int current;
    int armyInfoCacheIndex;
};


//--------------------------------------------------------------------------------------------------
//  SPY - Constant
//--------------------------------------------------------------------------------------------------
const fixed c_NG_UNIT_MAX_CACHE_TIME = 10.0;

const fixed c_NG_KNOWN_UNITS_FACTOR_MIN = 0.3;
const fixed c_NG_KNOWN_UNITS_FACTOR_MAX = 0.95;

// define size NG_spyArmyInfo array
const int c_NG_SPY_MAX_CACHE_SIZE = 8; 

const int c_NG_NEW_SUPPLIES_SMA_FACTOR = 2;
const fixed c_NG_KNOWN_UNITS_FACTOR_RECOVERY_RATE = 0.1666;
const int c_NG_LOST_SUPPLY_IMPORTANCE = 10;
const fixed c_NG_STARTING_SUPPLIES = 8.0;

const fixed c_NG_WHOLE_MAP_RANGE = 9999.0;

//--------------------------------------------------------------------------------------------------
//  SPY - Globals
//--------------------------------------------------------------------------------------------------

// instead of limiting the ai to 1vs1 we are adding a cached environment
// we need a typedef, because arrayrefs can only be used on types not on custom structArrays
typedef NG_spyArmyInfo[c_NG_SPY_MAX_CACHE_SIZE] spyInfoArray;
spyInfoArray realArmyInfos;
NG_spyArmyEnumerator spyArmyEnumerator;
int[30] usualSuppliesAtTime;
int[30] usualWorkersAtTime;

// array of spyunits for all player;
unit[8] spyingUnits;

fixed[c_NGUID_COUNT_RACES][c_NGUID_COUNT] unitSupplyCost;

//--------------------------------------------------------------------------------------------------
//  SPY - forward declarations
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  SPY - Init
//--------------------------------------------------------------------------------------------------
void initSupplyCostArray() {
    int i;
    
    // init Zerg supply
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        unitSupplyCost[c_NGUID_INDEX_ZERG][i] = 
                UnitTypeGetProperty(c_NG_unitIndexNames[c_NGUID_INDEX_ZERG][i], c_unitPropSuppliesUsed);
    }

    // init Protoss supply
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        unitSupplyCost[c_NGUID_INDEX_PROTOSS][i] = 
                UnitTypeGetProperty(c_NG_unitIndexNames[c_NGUID_INDEX_PROTOSS][i], c_unitPropSuppliesUsed);
    }

    // init Terran supply
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        unitSupplyCost[c_NGUID_INDEX_TERRAN][i] = 
                UnitTypeGetProperty(c_NG_unitIndexNames[c_NGUID_INDEX_TERRAN][i], c_unitPropSuppliesUsed);
    }
}

void initUsualSuppliesAtTime() {
    usualSuppliesAtTime[0] = 8;
    usualSuppliesAtTime[1] = 15;
    usualSuppliesAtTime[2] = 20;
    usualSuppliesAtTime[3] = 22;
    usualSuppliesAtTime[4] = 25;
    usualSuppliesAtTime[5] = 30;
    usualSuppliesAtTime[6] = 35;
    usualSuppliesAtTime[7] = 50;
    usualSuppliesAtTime[8] = 61;
    usualSuppliesAtTime[9] = 77;
    usualSuppliesAtTime[10] = 80;
    usualSuppliesAtTime[11] = 90;
    usualSuppliesAtTime[12] = 104;
    usualSuppliesAtTime[13] = 116;
    usualSuppliesAtTime[14] = 122;
    usualSuppliesAtTime[15] = 130;
    usualSuppliesAtTime[16] = 137;
    usualSuppliesAtTime[17] = 145;
    usualSuppliesAtTime[18] = 148;
    usualSuppliesAtTime[19] = 152;
    usualSuppliesAtTime[20] = 152;
    usualSuppliesAtTime[21] = 160;
    usualSuppliesAtTime[22] = 161;
    usualSuppliesAtTime[23] = 160;
    usualSuppliesAtTime[24] = 163;
    usualSuppliesAtTime[25] = 167;
    usualSuppliesAtTime[26] = 158;
    usualSuppliesAtTime[27] = 161;
    usualSuppliesAtTime[28] = 163;
    usualSuppliesAtTime[29] = 161;
}

void initUsualWorkersAtTime() {
    usualWorkersAtTime[0] = 12;
    usualWorkersAtTime[1] = 14;
    usualWorkersAtTime[2] = 16;
    usualWorkersAtTime[3] = 18;
    usualWorkersAtTime[4] = 20;
    usualWorkersAtTime[5] = 22;
    usualWorkersAtTime[6] = 24;
    usualWorkersAtTime[7] = 26;
    usualWorkersAtTime[8] = 28;
    usualWorkersAtTime[9] = 30;
    usualWorkersAtTime[10] = 32;
    usualWorkersAtTime[11] = 34;
    usualWorkersAtTime[12] = 36;
    usualWorkersAtTime[13] = 38;
    usualWorkersAtTime[14] = 40;
    usualWorkersAtTime[15] = 42;
    usualWorkersAtTime[16] = 44;
    usualWorkersAtTime[17] = 46;
    usualWorkersAtTime[18] = 48;
    usualWorkersAtTime[19] = 50;
    usualWorkersAtTime[20] = 52;
    usualWorkersAtTime[21] = 54;
    usualWorkersAtTime[22] = 56;
    usualWorkersAtTime[23] = 58;
    usualWorkersAtTime[24] = 60;
    usualWorkersAtTime[25] = 62;
    usualWorkersAtTime[26] = 64;
    usualWorkersAtTime[27] = 66;
    usualWorkersAtTime[28] = 68;
    usualWorkersAtTime[29] = 70;
}

void NG_initSpy() {
    initSupplyCostArray();
    initUsualSuppliesAtTime();
    initUsualWorkersAtTime();
}

void NG_initSpyForNGAI(int player) {
    //fill curSpyData with dummy-values for now
}

// do we use the blizz scouting on this AI?
bool NG_isBlizzScoutingEnabled(int player) {
    return true;
}

void NG_setSpyData(int supply, int air, int ground, int light, int bio, int mech, int armor, int conf) {
    //renew Data in curSpyData
//    curSpyData.estSupply = supply;
//    curSpyData.airCount = air;
//    curSpyData.groundCount = ground;
//    curSpyData.lightCount = light;
//    curSpyData.bioCount = bio;
//    curSpyData.mechCount = mech;
//    curSpyData.armorCount = armor;
//    curSpyData.confidence = conf;
}


//--------------------------------------------------------------------------------------------------
//  SPY - enemyArmy
//--------------------------------------------------------------------------------------------------

void initSpyArmyInfo(int ngaiID, int enemyID, structref<NG_spyArmyInfo> spyArmyInfo) {
    int i;
    
    spyArmyInfo.ngaiPlayerID = ngaiID;
    spyArmyInfo.enemyPlayerID = enemyID;
    spyArmyInfo.lastCalcTime = 0;
    spyArmyInfo.estimatedUnitCountFactor = 1.0;
    spyArmyInfo.estimatedSupply = c_NG_STARTING_SUPPLIES;
    spyArmyInfo.knownUnitsFactor = c_NG_KNOWN_UNITS_FACTOR_MIN;
    
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        spyArmyInfo.unitCount[i] = 0;
    }
}

int getSpyInfoIndex(int ngaiID, int enemyID, arrayref<spyInfoArray> armyInfos) {
    int i;
    fixed oldestCalcTime;
    int oldestCalcTimeIndex;
    
    // search for a cached ArmyInfo
    for (i = 0; i < c_NG_SPY_MAX_CACHE_SIZE; i += 1) {
        if (armyInfos[i].ngaiPlayerID == ngaiID && armyInfos[i].enemyPlayerID == enemyID) {
            NG_debugSpy("ARMY - cached ArmyInfo found at index " + IntToString(i));
            return i;
        }
    }
    
    // not cached return new slot (index with oldest cachetime)
    oldestCalcTime = armyInfos[0].lastCalcTime;
    for (i = 0; i < c_NG_SPY_MAX_CACHE_SIZE; i += 1) {
        if (armyInfos[i].lastCalcTime < oldestCalcTime) {
            oldestCalcTime = armyInfos[i].lastCalcTime;
            oldestCalcTimeIndex = i;
        }
    }
    NG_debugSpy("ARMY - ArmyInfo-Slot obtained at index " + IntToString(oldestCalcTimeIndex));
    // slot found clear 
    initSpyArmyInfo(ngaiID, enemyID, armyInfos[oldestCalcTimeIndex]);
    return oldestCalcTimeIndex;
}

int GetUsualWorkersAtTime(fixed time) {
    int minute;
    minute = FixedToInt(time) / 60;
    if (minute <= 29) {
        return usualWorkersAtTime[minute];
    }
    return 70;
}

int GetUsualSuppliesAtTime(fixed time) {
    int minute;
    minute = FixedToInt(time) / 60;
    if (minute <= 29) {
        return usualSuppliesAtTime[minute];
    }
    return 160;
}

void estimateSupplies(structref<NG_spyArmyInfo> spyArmyInfo) {
    fixed newSupplies;
    int difference;
    newSupplies = spyArmyInfo.knownUnitsFactor * spyArmyInfo.knownSupply +
            (1 - spyArmyInfo.knownUnitsFactor) * GetUsualSuppliesAtTime(AIGetTime());
    NG_debugSpy("New supplies: " + FixedToString(newSupplies, 1));
    difference = FixedToInt(spyArmyInfo.estimatedSupply - newSupplies);
    if (difference > 0) {
        spyArmyInfo.knownUnitsFactor += spyArmyInfo.knownUnitsFactor * difference / c_NG_LOST_SUPPLY_IMPORTANCE;
    } 

    if (spyArmyInfo.knownUnitsFactor < c_NG_KNOWN_UNITS_FACTOR_MIN) {
        spyArmyInfo.knownUnitsFactor = c_NG_KNOWN_UNITS_FACTOR_MIN;
    }

    if (spyArmyInfo.knownUnitsFactor > c_NG_KNOWN_UNITS_FACTOR_MAX) {
        spyArmyInfo.knownUnitsFactor = c_NG_KNOWN_UNITS_FACTOR_MAX;
    }

    if (spyArmyInfo.knownUnitsFactor > c_NG_KNOWN_UNITS_FACTOR_MIN) {
        spyArmyInfo.knownUnitsFactor -= c_NG_KNOWN_UNITS_FACTOR_RECOVERY_RATE;
    }
    NG_debugSpy("Known units factor: " + FixedToString(spyArmyInfo.knownUnitsFactor, 2));

    spyArmyInfo.estimatedSupply = (spyArmyInfo.estimatedSupply + c_NG_NEW_SUPPLIES_SMA_FACTOR * newSupplies) /
            (c_NG_NEW_SUPPLIES_SMA_FACTOR + 1);
    NG_debugSpy("Updated estimated supply to " + FixedToString(spyArmyInfo.estimatedSupply, 1));
}

void estimateUnitCount(structref<NG_spyArmyInfo> spyArmyInfo) {
    fixed ratio = 1;
    int i;
    int usualWorkers = GetUsualWorkersAtTime(AIGetTime());
    int knownWorkers = spyArmyInfo.unitCount[c_NGUID_WORKER];
    fixed workerSupply;
    fixed knownWorkersSupply;
    fixed usualWorkersSupply;
    fixed workerSupplyDifference;
    int workersToFillWith = 0;

    if (PlayerRace(spyArmyInfo.enemyPlayerID) == c_RaceStringZerg) {
        workerSupply = unitSupplyCost[c_NGUID_INDEX_ZERG][c_NGUID_WORKER];
    } else if (PlayerRace(spyArmyInfo.enemyPlayerID) == c_RaceStringProtoss) {
        workerSupply = unitSupplyCost[c_NGUID_INDEX_PROTOSS][c_NGUID_WORKER];
    } else if (PlayerRace(spyArmyInfo.enemyPlayerID) == c_RaceStringTerran) {
        workerSupply = unitSupplyCost[c_NGUID_INDEX_TERRAN][c_NGUID_WORKER];
    }

    knownWorkersSupply = workerSupply * knownWorkers;
    usualWorkersSupply = workerSupply * usualWorkers;
    workerSupplyDifference = usualWorkersSupply - knownWorkersSupply;
    if (workerSupplyDifference > (spyArmyInfo.estimatedSupply - spyArmyInfo.knownSupply)) {
        workerSupplyDifference = spyArmyInfo.estimatedSupply - spyArmyInfo.knownSupply;
    }
    if (workerSupplyDifference > 0) {
        workersToFillWith = FloorI(workerSupplyDifference / workerSupply);
    } else {
        workerSupplyDifference = 0;
    }
    if (spyArmyInfo.knownSupply > 0) {
        ratio = (spyArmyInfo.estimatedSupply - workerSupplyDifference) / spyArmyInfo.knownSupply;
    }
     
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        if (i == c_NGUID_WORKER && workersToFillWith != 0) {
            spyArmyInfo.estimatedUnitCount[i] = workersToFillWith;
        } else {
            spyArmyInfo.estimatedUnitCount[i] = FloorI(spyArmyInfo.unitCount[i] * ratio);
        }
    }    
}

void fillKnownUnitAttrs(structref<NG_spyArmyInfo> spyArmyInfo, int raceIndex){
	fixed gBioCount = 0;
	fixed aBioCount = 0;
	fixed gLightCount = 0;
	fixed aLightCount = 0;
	fixed gArmorCount = 0;
	fixed aArmorCount = 0;
	fixed massCount = 0;

	if(raceIndex == c_NGUID_INDEX_ZERG){
		//Zerg Ground-Units
		gBioCount += spyArmyInfo.unitCount[0] * unitSupplyCost[raceIndex][0];
		gBioCount += spyArmyInfo.unitCount[1] * unitSupplyCost[raceIndex][1];
		gLightCount += spyArmyInfo.unitCount[1] * unitSupplyCost[raceIndex][1];
		gBioCount += spyArmyInfo.unitCount[2] * unitSupplyCost[raceIndex][2];
		gBioCount += spyArmyInfo.unitCount[3] * unitSupplyCost[raceIndex][3];
		gArmorCount += spyArmyInfo.unitCount[3] * unitSupplyCost[raceIndex][3];
		gBioCount += spyArmyInfo.unitCount[4] * unitSupplyCost[raceIndex][4];
		gBioCount += spyArmyInfo.unitCount[5] * unitSupplyCost[raceIndex][5];
		gLightCount += spyArmyInfo.unitCount[5] * unitSupplyCost[raceIndex][5];
		gBioCount += spyArmyInfo.unitCount[6] * unitSupplyCost[raceIndex][6];
		gArmorCount += spyArmyInfo.unitCount[6] * unitSupplyCost[raceIndex][6];
		gBioCount += spyArmyInfo.unitCount[7] * unitSupplyCost[raceIndex][7];
		gArmorCount += spyArmyInfo.unitCount[7] * unitSupplyCost[raceIndex][7];
		gBioCount += spyArmyInfo.unitCount[8] * unitSupplyCost[raceIndex][8];
		gArmorCount += spyArmyInfo.unitCount[8] * unitSupplyCost[raceIndex][8];
		gBioCount += spyArmyInfo.unitCount[9] * unitSupplyCost[raceIndex][9];
		gArmorCount += spyArmyInfo.unitCount[9] * unitSupplyCost[raceIndex][9];
		massCount += spyArmyInfo.unitCount[9] * unitSupplyCost[raceIndex][9];
		//Zerg Air-Units
		aBioCount += spyArmyInfo.unitCount[10] * unitSupplyCost[raceIndex][10];
		aArmorCount += spyArmyInfo.unitCount[10] * unitSupplyCost[raceIndex][10];
		aBioCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][11];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][11];
		aBioCount += spyArmyInfo.unitCount[12] * unitSupplyCost[raceIndex][12];
		aLightCount += spyArmyInfo.unitCount[12] * unitSupplyCost[raceIndex][12];
		aBioCount += spyArmyInfo.unitCount[13] * unitSupplyCost[raceIndex][13];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][13];
		aBioCount += spyArmyInfo.unitCount[14] * unitSupplyCost[raceIndex][14];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][14];
		massCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][14];
		aBioCount += spyArmyInfo.unitCount[15] * unitSupplyCost[raceIndex][15];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][15];
		//Zerg Worker
		gBioCount += spyArmyInfo.unitCount[19] * unitSupplyCost[raceIndex][19];
		gLightCount += spyArmyInfo.unitCount[19] * unitSupplyCost[raceIndex][19];
	}else if(raceIndex == c_NGUID_INDEX_PROTOSS){
		//Protoss Ground-Units
		gBioCount += spyArmyInfo.unitCount[0] * unitSupplyCost[raceIndex][0];
		gLightCount += spyArmyInfo.unitCount[0] * unitSupplyCost[raceIndex][0];
		gArmorCount += spyArmyInfo.unitCount[1] * unitSupplyCost[raceIndex][1];
		gLightCount += spyArmyInfo.unitCount[2] * unitSupplyCost[raceIndex][2];
		gBioCount += spyArmyInfo.unitCount[3] * unitSupplyCost[raceIndex][3];
		gLightCount += spyArmyInfo.unitCount[3] * unitSupplyCost[raceIndex][3];
		gBioCount += spyArmyInfo.unitCount[4] * unitSupplyCost[raceIndex][4];
		gLightCount += spyArmyInfo.unitCount[4] * unitSupplyCost[raceIndex][4];
		gBioCount += spyArmyInfo.unitCount[5] * unitSupplyCost[raceIndex][5];
		gLightCount += spyArmyInfo.unitCount[5] * unitSupplyCost[raceIndex][5];
		gArmorCount += spyArmyInfo.unitCount[6] * unitSupplyCost[raceIndex][6];
		gArmorCount += spyArmyInfo.unitCount[7] * unitSupplyCost[raceIndex][7];
		massCount += spyArmyInfo.unitCount[7] * unitSupplyCost[raceIndex][7];
		gArmorCount += spyArmyInfo.unitCount[8] * unitSupplyCost[raceIndex][8];
		massCount += spyArmyInfo.unitCount[9] * unitSupplyCost[raceIndex][9];
		//Protoss Air-Units
		aLightCount += spyArmyInfo.unitCount[10] * unitSupplyCost[raceIndex][10];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][11];
		aLightCount += spyArmyInfo.unitCount[12] * unitSupplyCost[raceIndex][12];
		aArmorCount += spyArmyInfo.unitCount[13] * unitSupplyCost[raceIndex][13];
		aLightCount += spyArmyInfo.unitCount[14] * unitSupplyCost[raceIndex][14];
		aArmorCount += spyArmyInfo.unitCount[15] * unitSupplyCost[raceIndex][15];
		massCount += spyArmyInfo.unitCount[15] * unitSupplyCost[raceIndex][15];
		aArmorCount += spyArmyInfo.unitCount[16] * unitSupplyCost[raceIndex][16];
		massCount += spyArmyInfo.unitCount[16] * unitSupplyCost[raceIndex][16];
		aArmorCount += spyArmyInfo.unitCount[17] * unitSupplyCost[raceIndex][17];
		massCount += spyArmyInfo.unitCount[17] * unitSupplyCost[raceIndex][17];
		aArmorCount += spyArmyInfo.unitCount[18] * unitSupplyCost[raceIndex][18];
		//Protoss Worker
		gLightCount += spyArmyInfo.unitCount[19] * unitSupplyCost[raceIndex][19];
	}else if(raceIndex == c_NGUID_INDEX_TERRAN){
		//Terran Ground-Units
		gBioCount += spyArmyInfo.unitCount[0] * unitSupplyCost[raceIndex][0];
		gLightCount += spyArmyInfo.unitCount[0] * unitSupplyCost[raceIndex][0];
		gBioCount += spyArmyInfo.unitCount[1] * unitSupplyCost[raceIndex][1];
		gArmorCount += spyArmyInfo.unitCount[1] * unitSupplyCost[raceIndex][1];
		gBioCount += spyArmyInfo.unitCount[2] * unitSupplyCost[raceIndex][2];
		gLightCount += spyArmyInfo.unitCount[2] * unitSupplyCost[raceIndex][2];
		gBioCount += spyArmyInfo.unitCount[3] * unitSupplyCost[raceIndex][3];
		gLightCount += spyArmyInfo.unitCount[4] * unitSupplyCost[raceIndex][4];
		gArmorCount += spyArmyInfo.unitCount[5] * unitSupplyCost[raceIndex][5];
		gArmorCount += spyArmyInfo.unitCount[6] * unitSupplyCost[raceIndex][6];
		gLightCount += spyArmyInfo.unitCount[7] * unitSupplyCost[raceIndex][7];
		gArmorCount += spyArmyInfo.unitCount[8] * unitSupplyCost[raceIndex][8];
		massCount += spyArmyInfo.unitCount[8] * unitSupplyCost[raceIndex][8];
		gArmorCount += spyArmyInfo.unitCount[10] * unitSupplyCost[raceIndex][10];
		//Terran Air-Units
		aArmorCount += spyArmyInfo.unitCount[10] * unitSupplyCost[raceIndex][10];
		aArmorCount += spyArmyInfo.unitCount[11] * unitSupplyCost[raceIndex][11];
		aArmorCount += spyArmyInfo.unitCount[12] * unitSupplyCost[raceIndex][12];
		aLightCount += spyArmyInfo.unitCount[13] * unitSupplyCost[raceIndex][13];
		aLightCount += spyArmyInfo.unitCount[14] * unitSupplyCost[raceIndex][14];
		aArmorCount += spyArmyInfo.unitCount[15] * unitSupplyCost[raceIndex][15];
		massCount += spyArmyInfo.unitCount[15] * unitSupplyCost[raceIndex][15];
		//Terran Worker
		gBioCount += spyArmyInfo.unitCount[19] * unitSupplyCost[raceIndex][19];
		gLightCount += spyArmyInfo.unitCount[19] * unitSupplyCost[raceIndex][19];
	}
	if(spyArmyInfo.knownSupply != 0){
		spyArmyInfo.airLightCount = aLightCount / spyArmyInfo.knownSupply;
		spyArmyInfo.groundLightCount = gLightCount / spyArmyInfo.knownSupply;
		spyArmyInfo.airBioCount = aBioCount / spyArmyInfo.knownSupply;
		spyArmyInfo.groundBioCount = gBioCount / spyArmyInfo.knownSupply;
		spyArmyInfo.airArmorCount = aArmorCount / spyArmyInfo.knownSupply;
		spyArmyInfo.groundArmorCount = gArmorCount / spyArmyInfo.knownSupply;
		spyArmyInfo.massiveCount = massCount / spyArmyInfo.knownSupply;
	}else{
		spyArmyInfo.airLightCount = 0;
		spyArmyInfo.groundLightCount = 0;
		spyArmyInfo.airBioCount = 0;
		spyArmyInfo.groundBioCount = 0;
		spyArmyInfo.airArmorCount = 0;
		spyArmyInfo.groundArmorCount = 0;
		spyArmyInfo.massiveCount = 0;
	}
}

int calcKnownSupply(structref<NG_spyArmyInfo> spyArmyInfo, int raceIndex) {
    int i;
    fixed supply = 0.0;

    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        supply += spyArmyInfo.unitCount[i] * unitSupplyCost[raceIndex][i];
    }
    return FixedToInt(supply);
}

void fillKnownUnitCount(structref<NG_spyArmyInfo> spyArmyInfo, int raceIndex){
    int i;
     
    for (i = 0; i < c_NGUID_COUNT; i += 1) {
        spyArmyInfo.unitCount[i] = AIKnownUnitCount(spyArmyInfo.ngaiPlayerID, spyArmyInfo.enemyPlayerID, c_NG_unitIndexNames[raceIndex][i]);
    }    
}

void fillSpyInfoZerg(structref<NG_spyArmyInfo> spyArmyInfo) {
    fillKnownUnitCount(spyArmyInfo, c_NGUID_INDEX_ZERG);
    spyArmyInfo.knownSupply = calcKnownSupply(spyArmyInfo, c_NGUID_INDEX_ZERG);
    fillKnownUnitAttrs(spyArmyInfo, c_NGUID_INDEX_ZERG);
}

void fillSpyInfoProtoss(structref<NG_spyArmyInfo> spyArmyInfo) {
    fillKnownUnitCount(spyArmyInfo, c_NGUID_INDEX_PROTOSS);
    spyArmyInfo.knownSupply = calcKnownSupply(spyArmyInfo, c_NGUID_INDEX_PROTOSS);
    fillKnownUnitAttrs(spyArmyInfo, c_NGUID_INDEX_PROTOSS);
}

void fillSpyInfoTerran(structref<NG_spyArmyInfo> spyArmyInfo) {
    fillKnownUnitCount(spyArmyInfo, c_NGUID_INDEX_TERRAN);
    spyArmyInfo.knownSupply = calcKnownSupply(spyArmyInfo, c_NGUID_INDEX_TERRAN);
    fillKnownUnitAttrs(spyArmyInfo, c_NGUID_INDEX_TERRAN);
}

void fillSpyInfoData(structref<NG_spyArmyInfo> spyArmyInfo) {
    int ngaiID = spyArmyInfo.ngaiPlayerID;
    int enemyID = spyArmyInfo.enemyPlayerID;   
    fixed spyInfoAge = AIGetTime() - spyArmyInfo.lastCalcTime;
    
    if (spyInfoAge <= c_NG_UNIT_MAX_CACHE_TIME) {
        NG_debugSpy("ARMY - no need to calc (use cached data) (last time: " + FixedToString(spyInfoAge, 1) + "s) ");
        return;
    } else {
        NG_debugSpy("ARMY - Army Info too old (" + FixedToString(spyInfoAge, 1) + "s) -> calc new ");
    }
    
    spyArmyInfo.lastCalcTime = AIGetTime();    
    
    if (PlayerRace(enemyID) == c_RaceStringZerg) {
        fillSpyInfoZerg(spyArmyInfo);
    } else if (PlayerRace(enemyID) == c_RaceStringProtoss) {   
        fillSpyInfoProtoss(spyArmyInfo);  
    } else if (PlayerRace(enemyID) == c_RaceStringTerran) {
        fillSpyInfoTerran(spyArmyInfo);      
    }

    estimateSupplies(spyArmyInfo);
    estimateUnitCount(spyArmyInfo);
    if (spyArmyInfo.knownSupply > 0) {
        spyArmyInfo.estimatedUnitCountFactor = spyArmyInfo.estimatedSupply / spyArmyInfo.knownSupply;        
    }
    else {
        spyArmyInfo.estimatedUnitCountFactor = 1.0;
    }
}


//--------------------------------------------------------------------------------------------------
//  SPY - spying unit control
//--------------------------------------------------------------------------------------------------

void NG_spyScan(int ngai) {
    int i;
    unitgroup visibleBuildings;
    unit building;

    if (!NG_playerIsNGAI(ngai)) {
        return;
    }

    visibleBuildings = UnitGroupAlliance(ngai, c_unitAllianceEnemy, RegionEntireMap(), UnitFilterStr("Visible,Structure;-"), 0);

    for (i = 1; i <= UnitGroupCount(visibleBuildings, c_unitCountAll); i += 1) {
        building = UnitGroupUnit(visibleBuildings, i);

        // if town add higher prio attackpoint
        if (NG_unitIsTown(building)) {
            NG_AddAttackPoint(ngai, UnitGetPosition(building), c_NG_SPY_TOWN_SCAN_MODIFIER);
        } else {
            NG_AddAttackPoint(ngai, UnitGetPosition(building), c_NG_SPY_BUILDING_SCAN_MODIFIER);
        }
    }
}

unit NG_spySetSpyingUnit(int ngai, unit scout) {
    if (NG_playerIsNGAI(ngai)) {
        spyingUnits[ngai - 1] = scout;
        NG_RemoveUnitFromWave(ngai, scout, c_NG_WaitWave);
        NG_RemoveUnitFromWave(ngai, scout, c_NG_DefendWave);
        NG_RemoveUnitFromWave(ngai, scout, c_NG_AttackWave);
        NG_RemoveUnitFromWave(ngai, scout, c_NG_ReinfWave);
        // in case one debug command have used a color change
        UnitResetTeamColorIndex(scout);
    }
    return scout;
}


//--------------------------------------------------------------------------------------------------
//  SPY - Public functions
//--------------------------------------------------------------------------------------------------
void NG_spyStartScouting(int player){
	if (NG_playerIsNGAI(player)) {
        //AISetNumScouts(player, 1);
	    AISetFlag(player, e_flagsScouting, true);
	}
}

int NG_spyGetEstimatedSupply(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);
    
    return FixedToInt(armyInfo.estimatedSupply);
}

int NG_spyGetKnownSupply(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);
    
    return armyInfo.knownSupply;
}

int NG_spyGetUnitCount(int ngaiPlayerID, int enemyPlayerID, int unitTypeConst) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.unitCount[unitTypeConst];
}

int NG_spyGetEstimatedUnitCount(int ngaiPlayerID, int enemyPlayerID, int unitTypeConst) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.estimatedUnitCount[unitTypeConst];
}

fixed NG_spyGetLightAir(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.airLightCount * 100;
}

fixed NG_spyGetLightGround(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.groundLightCount * 100;
}

fixed NG_spyGetBioAir(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.airBioCount * 100;
}

fixed NG_spyGetBioGround(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.groundBioCount * 100;
}

fixed NG_spyGetArmorAir(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.airArmorCount * 100;
}

fixed NG_spyGetArmorGround(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.groundArmorCount * 100;
}

fixed NG_spyGetMassive(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    armyInfo = realArmyInfos[getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos)];
    fillSpyInfoData(armyInfo);

    return armyInfo.massiveCount * 100;
}


//--------------------------------------------------------------------------------------------------
//  SPY - ARMY LOOP FUNCTIONS

void NG_spyArmyLoopStep() {
    spyArmyEnumerator.current += 1;
    if (NG_spyArmyLoopDone()) {
        return;
    }
    if (realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].unitCount[spyArmyEnumerator.current] == 0) {
        NG_spyArmyLoopStep();
    }
}

void NG_spyEnemyArmyLoopBegin(int ngaiPlayerID, int enemyPlayerID) {
    structref<NG_spyArmyInfo> armyInfo;
    int i;
    
    // is loop in use? 
    if (spyArmyEnumerator.inuse) {
        NG_debugError("ARMY - FATAL: cant begin loop --> already in use");
        return;
    }
    
    // first obtain a SpyInfo
    i = getSpyInfoIndex(ngaiPlayerID, enemyPlayerID, realArmyInfos);
    armyInfo = realArmyInfos[i];
    fillSpyInfoData(armyInfo);

    spyArmyEnumerator.inuse = true;
    spyArmyEnumerator.current = -1;
    spyArmyEnumerator.armyInfoCacheIndex = i;
    
    // do our first step 
    NG_spyArmyLoopStep();
}

int NG_spyArmyLoopKnownSupply() {
    return realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].knownSupply;
}

int NG_spyArmyLoopEstimatedSupply() {
    return FixedToInt(realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].estimatedSupply);
}

bool NG_spyArmyLoopDone() {
    return !spyArmyEnumerator.inuse || spyArmyEnumerator.current >= c_NGUID_COUNT;
}

void NG_spyArmyLoopEnd() {
    spyArmyEnumerator.inuse = false;
}

int NG_spyArmyLoopCurrentUnitCount() {
    if (NG_spyArmyLoopDone()) {
        NG_debugError("ARMY - FATAL: cant get count --> out of index or not loop end");
        return -1;
    }
    return realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].unitCount[spyArmyEnumerator.current];
}

int NG_spyArmyLoopCurrentEstimatedUnitCount() {
    if (NG_spyArmyLoopDone()) {
        NG_debugError("ARMY - FATAL: cant get count --> out of index or not loop end");
        return -1;
    }
    return realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].estimatedUnitCount[spyArmyEnumerator.current];
}

int NG_spyArmyLoopCurrentUnitType() {
    if (NG_spyArmyLoopDone()) {
        NG_debugError("ARMY - FATAL: cant get type --> out of index or not loop end");
        return -1;
    }
    return spyArmyEnumerator.current;
}

string NG_spyArmyLoopCurrentUnitString() {
    int enemyID;
    if (NG_spyArmyLoopDone()) {
        NG_debugError("ARMY - FATAL: cant get type --> out of index or not loop end");
        return "";
    }
    enemyID = realArmyInfos[spyArmyEnumerator.armyInfoCacheIndex].enemyPlayerID;
    return c_NG_unitIndexNames[NG_playerGetRaceIndex(enemyID)][spyArmyEnumerator.current];
}

bool NG_spyEnemyHasCloakedUnits(int ngai) {
    return AIGetCloakedAttacker(ngai) != null;
}
