const int c_NG_BurningMineralsThreshold = 600;
const int c_NG_BurningGasThreshold = 300;
const int c_NG_LoweringLevelThreshold = 400;

const fixed EstimatedPeriod = 5; //10.0;

int[8] OldMinerals;
int[8] OldGas;
int[8] BurningLevelMinerals;
int[8] BurningLevelGas;
fixed[8] LastCallEstimate;

int[8] BurnCurrentMaxCount;

NG_burnPos[8][c_NG_maxBurnerArrayPos + 1] NG_Burner;

void NG_AddBurnPosCapped(int player, string unitString, bool buildOnce, int burnRessource, int minimalLevel, fixed buildCount, int buildingCap) {
    int maxIndex = BurnCurrentMaxCount[player - 1];
    if (maxIndex <= c_NG_maxBurnerArrayPos) {
        NG_Burner[player - 1][maxIndex].unitString = unitString;
        NG_Burner[player - 1][maxIndex].buildOnce = buildOnce;
        NG_Burner[player - 1][maxIndex].alreadyIssued = false;
        NG_Burner[player - 1][maxIndex].burnRessource = burnRessource;
        NG_Burner[player - 1][maxIndex].buildCount = buildCount;
        NG_Burner[player - 1][maxIndex].minLevel = minimalLevel;
        NG_Burner[player - 1][maxIndex].buildingCap = buildingCap;
        BurnCurrentMaxCount[player - 1] += 1;
    } else {
        NG_debugCommander("<TODO> Make NG_Burner bigger. " + IntToString(maxIndex) + " is too small.");
    }
}

void NG_AddBurnPos(int player, string unitString, bool buildOnce, int burnRessource, int minimalLevel, fixed buildCount) {
    NG_AddBurnPosCapped(player, unitString, buildOnce, burnRessource, minimalLevel, buildCount, 0);
}

int NG_GetBurnLevelMinerals(int player) {
    return BurningLevelMinerals[player - 1];
}

int NG_GetBurnLevelVespene(int player) {
    return BurningLevelGas[player - 1];
}

void NG_TryBurn(int player) {
    if (LastCallEstimate[player - 1] + EstimatedPeriod < (GameGetMissionTime())) {
        // 10Sek Task
        NG_EstimateBurningRate(player);
        NG_BurnRessources(player);
        LastCallEstimate[player - 1] += EstimatedPeriod;
    }
}

fixed NG_cap(fixed desired, fixed cap) {
    if (cap > 0 && desired >= cap) {
        return cap;
    } else if(cap <= 0){
        return 0;
    } else {
        return desired;
    }
}

void NG_BurnRessources(int player) {
    int i = 0;
    int j = 0;
    int maxIndex = BurnCurrentMaxCount[player - 1];
    int burnLevelMin = BurningLevelMinerals[player - 1];
    int burnLevelVesp = BurningLevelGas[player - 1];

    int curBurnRessource = 1000;
    int curMinimalLevel = 100;
    int curCount = 0;
    int curUnitCap = 0;
    int deps = 0;
    int burnFactor = 1;
    string curUnitString = "";
    string currentDep = "";

    bool didBmIssue = false;

    // > 10 => BurnFactor == 2, > 20 => BurnFactor == 3, etc.
    burnFactor = NG_roundUp((burnLevelMin + burnLevelVesp + 10) / 10);

    NG_debugCommander("BurnFactor = " + IntToString(burnFactor));

    for (i = 0; i < maxIndex; i += 1) {
        curBurnRessource = NG_Burner[player - 1][i].burnRessource;
        curMinimalLevel = NG_Burner[player - 1][i].minLevel;
        curUnitString = NG_Burner[player - 1][i].unitString;
        curUnitCap = NG_Burner[player - 1][i].buildingCap;

        curCount = NG_GetUnitCount(player, curUnitString);

        // If unit is already build --> Jump over
        if (NG_Burner[player - 1][i].buildOnce == true && NG_Burner[player - 1][i].alreadyIssued == true) {
            continue;
        }

        // If Unit is capped --> Jump over
        if (curUnitCap > 0 && curCount >= curUnitCap) {
            continue;
        } else if (curUnitCap - curCount < 0){
            // Deactivate Position
            NG_Burner[player - 1][i].buildOnce = true;
            NG_Burner[player - 1][i].alreadyIssued = true;
        }

        if (((curBurnRessource == NG_BurnMineral) && (curMinimalLevel <= burnLevelMin)) || ((curBurnRessource == NG_BurnVespene) && (curMinimalLevel <= burnLevelVesp)) || ((curBurnRessource == NG_BurnBoth) && (curMinimalLevel <= burnLevelMin) && (curMinimalLevel <= burnLevelVesp))) {
            if (NG_getUnitIndex(curUnitString) == -1) {
                // We have a Building as curUnitString
                deps = 0;
            } else {
                deps = NG_getMissingUnitDependencies(player, curUnitString);
            }
            if (deps <= 2) {
                // Add Dependent Buildings first and then build the Unit
                for (j = 0; j < deps; j = j + 1) {
                    currentDep = NG_missingUnitDependencies[player - 1][j];
                    if (NG_CountQueued(player, currentDep) == 0) {
                        NG_TryBuildBurner(player, currentDep, 1);
                        NG_debugCommander("[Burner] Player " + IntToString(player) + " Building Dependency: " + currentDep);
                    }
                }
                // Build Unit now
                if (NG_Burner[player - 1][i].buildOnce == false) {
                    if (curUnitCap > 0) {
                        NG_TryUpdateBurnerFixed(player, curUnitString, NG_cap(burnFactor * NG_Burner[player - 1][i].buildCount, IntToFixed(curUnitCap - curCount)));
                        didBmIssue = true;
                    } else {
                        didBmIssue = NG_TryBuildBurnerFixed(player, curUnitString, burnFactor * NG_Burner[player - 1][i].buildCount);
                    }
                } else {
                    didBmIssue = NG_TryBuildBurnerFixed(player, curUnitString, NG_Burner[player - 1][i].buildCount);
                }
                NG_debugCommander("[Burner] Player " + IntToString(player) + " Building: " + curUnitString + " x" + FixedToString(NG_Burner[player - 1][i].buildCount, 2));

                if (NG_Burner[player - 1][i].buildOnce && didBmIssue) {
                    NG_Burner[player - 1][i].alreadyIssued = true;
                }
            }
        }
    }
}

void NG_EstimateBurningRate(int player) {
    int currentMinerals;
    int currentGas;
    currentMinerals = PlayerGetPropertyInt(player, c_playerPropMinerals);
    currentGas = PlayerGetPropertyInt(player, c_playerPropVespene);

    // Check GAS
    if (currentGas < c_NG_BurningGasThreshold) {
        BurningLevelGas[player - 1] = 0;
    } else if (currentGas >= OldGas[player - 1]) {
        BurningLevelGas[player - 1] += 1;
    } else if (currentGas < c_NG_LoweringLevelThreshold) {
        BurningLevelGas[player - 1] -= 1;
    }

    // Check Minerals
    if (currentMinerals < c_NG_BurningMineralsThreshold) {
        BurningLevelMinerals[player - 1] = 0;
    } else if (currentMinerals >= OldMinerals[player - 1]) {
        BurningLevelMinerals[player - 1] += 1;
    } else if (currentMinerals < c_NG_LoweringLevelThreshold) {
        // Let the Burning going on if we have e.g. 4000 Min but it is less then the last Time we checked.
        BurningLevelMinerals[player - 1] -= 1;
    }

    NG_debugCommander("(Player " + IntToString(player) + "):<n/>Current BurningLevel Min: " + IntToString(BurningLevelMinerals[player - 1]) + "<n/>Current BurningLevel Gas: " + IntToString(BurningLevelGas[player - 1]));

    OldMinerals[player - 1] = currentMinerals;
    OldGas[player - 1] = currentGas;
}
